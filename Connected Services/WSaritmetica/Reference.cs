//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace aritmeticaWeb.WSaritmetica {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WSaritmetica.WSaritmeticaSoap")]
    public interface WSaritmeticaSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sumar", ReplyAction="*")]
        double Sumar(double nro1, double nro2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sumar", ReplyAction="*")]
        System.Threading.Tasks.Task<double> SumarAsync(double nro1, double nro2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Restar", ReplyAction="*")]
        double Restar(double nro1, double nro2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Restar", ReplyAction="*")]
        System.Threading.Tasks.Task<double> RestarAsync(double nro1, double nro2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiplicar", ReplyAction="*")]
        double Multiplicar(double nro1, double nro2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiplicar", ReplyAction="*")]
        System.Threading.Tasks.Task<double> MultiplicarAsync(double nro1, double nro2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Dividir", ReplyAction="*")]
        double Dividir(double nro1, double nro2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Dividir", ReplyAction="*")]
        System.Threading.Tasks.Task<double> DividirAsync(double nro1, double nro2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Factorial", ReplyAction="*")]
        int Factorial(int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Factorial", ReplyAction="*")]
        System.Threading.Tasks.Task<int> FactorialAsync(int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Potencia", ReplyAction="*")]
        double Potencia(double numero, double elevado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Potencia", ReplyAction="*")]
        System.Threading.Tasks.Task<double> PotenciaAsync(double numero, double elevado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Seno", ReplyAction="*")]
        double Seno(double numero);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Seno", ReplyAction="*")]
        System.Threading.Tasks.Task<double> SenoAsync(double numero);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Tangente", ReplyAction="*")]
        double Tangente(double numero);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Tangente", ReplyAction="*")]
        System.Threading.Tasks.Task<double> TangenteAsync(double numero);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Invertir", ReplyAction="*")]
        double Invertir(int numero);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Invertir", ReplyAction="*")]
        System.Threading.Tasks.Task<double> InvertirAsync(int numero);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Raizz", ReplyAction="*")]
        double Raizz(double numero, double raiz);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Raizz", ReplyAction="*")]
        System.Threading.Tasks.Task<double> RaizzAsync(double numero, double raiz);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Raiz", ReplyAction="*")]
        double Raiz(double numero);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Raiz", ReplyAction="*")]
        System.Threading.Tasks.Task<double> RaizAsync(double numero);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WSaritmeticaSoapChannel : aritmeticaWeb.WSaritmetica.WSaritmeticaSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WSaritmeticaSoapClient : System.ServiceModel.ClientBase<aritmeticaWeb.WSaritmetica.WSaritmeticaSoap>, aritmeticaWeb.WSaritmetica.WSaritmeticaSoap {
        
        public WSaritmeticaSoapClient() {
        }
        
        public WSaritmeticaSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WSaritmeticaSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WSaritmeticaSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WSaritmeticaSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Sumar(double nro1, double nro2) {
            return base.Channel.Sumar(nro1, nro2);
        }
        
        public System.Threading.Tasks.Task<double> SumarAsync(double nro1, double nro2) {
            return base.Channel.SumarAsync(nro1, nro2);
        }
        
        public double Restar(double nro1, double nro2) {
            return base.Channel.Restar(nro1, nro2);
        }
        
        public System.Threading.Tasks.Task<double> RestarAsync(double nro1, double nro2) {
            return base.Channel.RestarAsync(nro1, nro2);
        }
        
        public double Multiplicar(double nro1, double nro2) {
            return base.Channel.Multiplicar(nro1, nro2);
        }
        
        public System.Threading.Tasks.Task<double> MultiplicarAsync(double nro1, double nro2) {
            return base.Channel.MultiplicarAsync(nro1, nro2);
        }
        
        public double Dividir(double nro1, double nro2) {
            return base.Channel.Dividir(nro1, nro2);
        }
        
        public System.Threading.Tasks.Task<double> DividirAsync(double nro1, double nro2) {
            return base.Channel.DividirAsync(nro1, nro2);
        }
        
        public int Factorial(int n) {
            return base.Channel.Factorial(n);
        }
        
        public System.Threading.Tasks.Task<int> FactorialAsync(int n) {
            return base.Channel.FactorialAsync(n);
        }
        
        public double Potencia(double numero, double elevado) {
            return base.Channel.Potencia(numero, elevado);
        }
        
        public System.Threading.Tasks.Task<double> PotenciaAsync(double numero, double elevado) {
            return base.Channel.PotenciaAsync(numero, elevado);
        }
        
        public double Seno(double numero) {
            return base.Channel.Seno(numero);
        }
        
        public System.Threading.Tasks.Task<double> SenoAsync(double numero) {
            return base.Channel.SenoAsync(numero);
        }
        
        public double Tangente(double numero) {
            return base.Channel.Tangente(numero);
        }
        
        public System.Threading.Tasks.Task<double> TangenteAsync(double numero) {
            return base.Channel.TangenteAsync(numero);
        }
        
        public double Invertir(int numero) {
            return base.Channel.Invertir(numero);
        }
        
        public System.Threading.Tasks.Task<double> InvertirAsync(int numero) {
            return base.Channel.InvertirAsync(numero);
        }
        
        public double Raizz(double numero, double raiz) {
            return base.Channel.Raizz(numero, raiz);
        }
        
        public System.Threading.Tasks.Task<double> RaizzAsync(double numero, double raiz) {
            return base.Channel.RaizzAsync(numero, raiz);
        }
        
        public double Raiz(double numero) {
            return base.Channel.Raiz(numero);
        }
        
        public System.Threading.Tasks.Task<double> RaizAsync(double numero) {
            return base.Channel.RaizAsync(numero);
        }
    }
}
